@page "/"
@using System.Net.Http.Headers;
@using BlazorFileUpload.Shared
@inject HttpClient http
@inject IUploadService UploadService
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Upload Files</PageTitle>

<h1>Upload Files</h1>

<InputFile OnChange="UploadService.InputFileChange" multiple />

@if (fileNames.Count > 0)
{
    <ul>
        @foreach (var fileName in UploadService.FileNames)
        {
            <li>
                File: @fileName
                <br>
                <span>
                    Stored File Name: @GetStoredFileName(fileName)
                </span>
                <button @onclick="@(() => DownloadFile(GetStoredFileName(fileName), fileName))">Download</button>
            </li>
        }
    </ul>
}

@if (UploadService.Files == null || UploadService.Files.Count == 0)
{
    <span>@UploadService.Message</span>
}
else
{
    <div>test</div>
    <ul>
        @foreach (var file in UploadService.Files)
        {
            <li>
                File: @file.FileName
                <br>
                <span>
                    Stored File Name: @file.StoredFileName
                </span>
                <button class="btn btn-primary" @onclick="@(() => DownloadFile(file.StoredFileName, file.FileName))">Download</button>
            </li>
        }
    </ul>
}

@code
{
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();

    protected override async Task OnInitializedAsync()
    {
        await UploadService.GetFilesFromDb();

        UploadService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UploadService.OnChange -= StateHasChanged;
    }

    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
        {
            return uploadResult.StoredFileName;
        }
        else
        {
            return "File Not Found.";
        }
    }

    private async Task DownloadFile(string storedFileName, string originalFileName)
    {
        var response = await http.GetAsync($"/api/File/{storedFileName}");
        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "File not found");
        }
        else
        {
            var fileStream = response.Content.ReadAsStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", originalFileName, streamRef);
        }
    }


}